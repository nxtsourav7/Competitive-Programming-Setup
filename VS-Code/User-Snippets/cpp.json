{
    "F0R": {
        "prefix": "f0r",
        "body": [
          "for(int ${1:i} = 0; ${1:i} < ${2:n}; ++${1:i}) {",
          "    ${0}",
          "}"
        ],
        "description": "for(0->less than x)"
    },
    "increment": {
        "prefix": "for",
        "body": [
          "for(int ${1:i} = ${2:0}; ${1:i} < ${3:n}; ++${1:i}) {",
          "${0}",
          "}"
        ],
        "description": "for"
    },
    "decrement": {
        "prefix": "rof",
        "body": [
          "for(int ${1:i} = ${2:n}; ${1:i} >= ${3:0}; --${1:i}) {",
          "${0}",
          "}"
        ],
        "description": "use for dedecrement"
    },
    "every_element": {
        "prefix": "ech",
        "body": [
          "for(auto& ${1:it} : ${2}) {${0}}"
        ],
        "description": ""
    },
    "vector": {
        "prefix": "vec",
        "body": [
          "vector<${1}> ${0}"
        ],
        "description": ""
    },
    "sorting": {
        "prefix": "sor",
        "body": [
          "sort(all(${1:arr}));",
          "${0}"
        ],
        "description": "assending"
    },
    "reverse sort": {
        "prefix": "rsor",
        "body": [
          "sort(rall(${1:arr}));",
          "${0}"
        ],
        "description": "desending"
    },
    "pop_back()": {
        "prefix": "pob",
        "body": [
          "${1:v}.pop_back();",
          "${0}"
        ],
        "description": "pop_back()"
    },
    "push_back()": {
        "prefix": "pb",
        "body": [
          "${1:v}.push_back(${2:x});",
          "${0}"
        ],
        "description": "push_back()"
    },
    "ttt": {
        "prefix": "ff",
        "body": [
          "/**",
          " *  author : nxtsourav7",
          " *  created : ${1}",
          "**/",
          "",
          "#include<bits/stdc++.h>",
          "using namespace std;",
          "",
          "#define endl \"\\n\"",
          "#define int long long ",
          "#define sz(x) (int)x.size()",
          "#define all(x) x.begin(), x.end()",
          "#define rall(x) x.rbegin(), x.rend()",
          "",
          "int32_t main() {",
          "    cin.tie(0)->sync_with_stdio(0);",
          "",
          "    auto nxtsourav7 = []()->void {",
          "        ${0}",
          "    };",
          "",
          "    bool Q = ${2:true};",
          "    int T = Q? (cin>>T, T) : 1;",
          "    for(int test=1; test<=T; ++test) {",
          "        // cout << \"Case #\" << test << \": \";",
          "        nxtsourav7();",
          "        cout << endl;",
          "    }",
          "    ",
          "    return 0;",
          "}"
        ],
        "description": ""
    },
    "pbds": {
        "prefix": "pbds",
        "body": [
          "// PBDS -->",
          "#include <ext/pb_ds/assoc_container.hpp>",
          "#include <ext/pb_ds/tree_policy.hpp>",
          "using namespace __gnu_pbds;",
          "typedef tree<",
          "int,",
          "null_type,",
          "less_equal<int>,",
          "rb_tree_tag,",
          "tree_order_statistics_node_update>",
          "ordered_set;",
          "// <--",
          "",
          "",
        ],
        "description": ""
    },
    "pair": {
        "prefix": "pr",
        "body": [
          "pair<${1}, ${2}> ${0}"
        ],
        "description": ""
    },
    "unordered map": {
        "prefix": "ump",
        "body": [
          "unordered_map<${1}, ${2}> ${0}"
        ],
        "description": ""
    },
    "ordered map": {
        "prefix": "mp",
        "body": [
          "map<${1}, ${2}> ${0}"
        ],
        "description": ""
    },
    "Delete Duplicates": {
        "prefix": "dd",
        "body": [
          "${1:arr}.erase(unique(all(${1:arr})), ${1:arr}.end());${0}"
        ],
        "description": ""
    },
    "input 2D vector": {
        "prefix": "2d_input",
        "body": [
          "for (auto &row : ${1:arr}) {",
          " for (auto &it : row) {cin >> it;}",
            "}${0}",
        ],
        "description": ""
    },
    "declear 2D vector": {
        "prefix": "v2d",
        "body": [
            "vector<vector<${1:int}>> ${2:arr}(${3:n}, vector<${1:int}>(${4:m}, ${5:0}));${0}"
        ],
        "description": ""
    },
    "input 1D vector": {
        "prefix": "1d_input",
        "body": [
          "for(auto &it : ${1:arr}) {cin >> it;}${0}"
        ],
        "description": ""
    },
}
